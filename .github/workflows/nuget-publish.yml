name: Build and Publish NuGet

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'NuGet package version (e.g. 1.2.3) â€“ only used for manual runs'
        required: true
        type: string
        default: '1.0.0'
      dry_run:
        description: 'Skip pushing packages (for CI dry-run integration)'
        required: false
        type: boolean
        default: true

jobs:
  build:
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_dispatch')
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if tag is on master
        if: github.event_name == 'push'
        id: check_tag
        shell: bash
        run: |
          git fetch origin master
          if git merge-base --is-ancestor origin/master ${{ github.sha }}; then
            echo "on_master=true" >> $GITHUB_OUTPUT
          else
            echo "on_master=false" >> $GITHUB_OUTPUT
          fi

      - name: Fail if tag is not on master
        if: github.event_name == 'push' && steps.check_tag.outputs.on_master != 'true'
        run: |
          echo "Tag is not on master. Exiting."
          exit 1

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Extract version
        id: get_version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ github.event.inputs.version }}" ]; then
              echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            else
              echo "Error: 'version' input is missing for workflow_dispatch event." >&2
              exit 1
            fi
          else
            echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
          fi

      - name: Update csproj version
        shell: pwsh
        run: |
          $proj = 'SerpentModding/SerpentModding.csproj'
          $version = '${{ steps.get_version.outputs.version }}'
          if (-not $version) { Write-Error 'No version specified or detected!'; exit 1 }
          $content = Get-Content $proj -Raw
          if ($content -match '<Version>.*</Version>') {
            $content = $content -replace '<Version>.*</Version>', "<Version>$version</Version>"
          } else {
            $content = $content -replace '(<PropertyGroup>)', "`$1`n    <Version>$version</Version>"
          }
          Set-Content $proj $content

      - name: Extract release notes from CHANGELOG.md
        id: changelog
        shell: pwsh
        run: |
          $version = '${{ steps.get_version.outputs.version }}'
          $lines = Get-Content CHANGELOG.md
          $start = ($lines | Select-String "## \[$version\]").LineNumber
          if (-not $start) { Write-Error "No changelog entry for version $version"; exit 1 }
          $startIdx = $start
          $next = ($lines | Select-String "^## \[" | Where-Object { $_.LineNumber -gt $startIdx }) | Select-Object -First 1
          $endIdx = if ($next) { $next.LineNumber - 1 } else { $lines.Count }
          $notes = $lines[($startIdx)..($endIdx - 1)] -join "`n"
          $notes = $notes -replace '^## \[.*\] - .*\r?\n?', ''
          echo "notes<<EOF" >> $env:GITHUB_OUTPUT
          echo "$notes" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

      - name: Update csproj release notes
        shell: pwsh
        run: |
          $proj = 'SerpentModding/SerpentModding.csproj'
          $notes = '${{ steps.changelog.outputs.notes }}'
          $content = Get-Content $proj -Raw
          if ($content -match '<PackageReleaseNotes>.*</PackageReleaseNotes>') {
            $content = $content -replace '<PackageReleaseNotes>.*</PackageReleaseNotes>', "<PackageReleaseNotes>$notes</PackageReleaseNotes>"
          }
          Set-Content $proj $content

      - name: Restore dependencies
        run: dotnet restore SerpentModding/SerpentModding.csproj

      - name: Build
        run: dotnet build SerpentModding/SerpentModding.csproj --configuration Release --no-restore

      - name: Pack
        run: dotnet pack SerpentModding/SerpentModding.csproj --configuration Release --no-build --output nupkg

      - name: Push package(s) to NuGet.org
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true')
        shell: pwsh
        run: |
          $nupkgs = Get-ChildItem -Path 'nupkg' -Filter '*.nupkg'
          foreach ($pkg in $nupkgs) {
            Write-Host "Pushing $($pkg.FullName)..."
            dotnet nuget push $pkg.FullName --api-key '${{ secrets.NUGET_API_KEY }}' --source https://api.nuget.org/v3/index.json --skip-duplicate
          }

      - name: Push package(s) to GitHub Packages
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true')
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $nupkgs = Get-ChildItem -Path 'nupkg' -Filter '*.nupkg'
          foreach ($pkg in $nupkgs) {
            Write-Host "Pushing $($pkg.FullName) to GitHub Packages..."
            dotnet nuget push $pkg.FullName --api-key $env:GITHUB_TOKEN --source https://nuget.pkg.github.com/Serpensin/index.json --skip-duplicate
          }
